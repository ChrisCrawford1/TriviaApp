package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"net/http"
	"strconv"
	"strings"

	"github.com/chriscrawford1/trivia_app/helpers"
)

var baseURL string = "https://opentdb.com/api.php?"

//Questions Struct mimicks the return of the data given from the API
// Structure generated by - https://mholt.github.io/json-to-go/
type Questions struct {
	ResponseCode int `json:"response_code"`
	Results      []struct {
		Category         string   `json:"category"`
		Type             string   `json:"type"`
		Difficulty       string   `json:"difficulty"`
		Question         string   `json:"question"`
		CorrectAnswer    string   `json:"correct_answer"`
		IncorrectAnswers []string `json:"incorrect_answers"`
	} `json:"results"`
}

func main() {
	questionAmount := flag.Int("questions", 10, "The number of questions you wish to get")
	difficulty := flag.String("difficulty", "easy", "The difficulty of the questions returned")
	flag.Parse()

	params := make(map[string]string)
	params["amount"] = strconv.Itoa(*questionAmount)
	params["difficulty"] = *difficulty

	query := helpers.BuildQuery(baseURL, params)
	sendQuery(query)
}

func sendQuery(query string) {
	res, _ := http.Get(query)

	// Create struct and assign json decoded data to value receiver
	var questions Questions
	json.NewDecoder(res.Body).Decode(&questions)

	playQuiz(questions)
}

func playQuiz(questions Questions) {
	correct := 0
	for i := 0; i < len(questions.Results); i++ {
		fmt.Printf("Q(%d) - %s\n", i+1, questions.Results[i].Category)
		fmt.Printf("%s\n", questions.Results[i].Question)

		var answer string
		fmt.Scanf("%s", &answer)

		if answer == strings.ToLower(questions.Results[i].CorrectAnswer) {
			correct++
		}
	}

	fmt.Printf("You scored (%d/%d)\n", correct, len(questions.Results))
}
